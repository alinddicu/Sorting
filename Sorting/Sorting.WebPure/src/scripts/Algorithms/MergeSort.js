var Algorithms;
(function (Algorithms) {
    class MergeSort extends Algorithms.SortBase {
        execute(unsortedList) {
            super.execute(unsortedList);
            this.arrayCopy = super.copy(unsortedList);
            super.addToIntermediateSorts(this.arrayCopy);
            this.topDownMergeSort(this.arrayCopy, [], this.arrayCopy.length);
            this.stopWatch();
            return this.arrayCopy;
        }
        topDownMergeSort(a, b, n) {
            this.copyArray(a, 0, n, b);
            this.topDownSplitMerge(b, 0, n, a);
        }
        topDownSplitMerge(b, iBegin, iEnd, a) {
            if (iEnd - iBegin < 2) {
                return;
            }
            const iMiddle = Math.floor((iEnd + iBegin) / 2);
            this.topDownSplitMerge(a, iBegin, iMiddle, b);
            this.topDownSplitMerge(a, iMiddle, iEnd, b);
            this.topDownMerge(b, iBegin, iMiddle, iEnd, a);
        }
        topDownMerge(a, iBegin, iMiddle, iEnd, b) {
            let i = iBegin;
            let j = iMiddle;
            for (let k = iBegin; k < iEnd; k++) {
                if (i < iMiddle && (j >= iEnd || a[i] <= a[j])) {
                    b[k] = a[i];
                    i++;
                }
                else {
                    b[k] = a[j];
                    j++;
                }
            }
            super.addToIntermediateSorts(this.arrayCopy);
        }
        copyArray(a, iBegin, iEnd, b) {
            for (let k = iBegin; k < iEnd; k++) {
                b[k] = a[k];
            }
        }
    }
    Algorithms.MergeSort = MergeSort;
})(Algorithms || (Algorithms = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVyZ2VTb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWVyZ2VTb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQVUsVUFBVSxDQXdEbkI7QUF4REQsV0FBVSxVQUFVO0lBQ25CLGVBQXVCLFNBQVEsV0FBQSxRQUFRO1FBRy9CLE9BQU8sQ0FBQyxZQUFzQjtZQUNwQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTdDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRWpFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN2QixDQUFDO1FBRU8sZ0JBQWdCLENBQUMsQ0FBVyxFQUFFLENBQVcsRUFBRSxDQUFTO1lBQzNELElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFFTyxpQkFBaUIsQ0FBQyxDQUFXLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxDQUFXO1lBQy9FLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsTUFBTSxDQUFDO1lBQ1IsQ0FBQztZQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUU1QyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDO1FBRU8sWUFBWSxDQUFDLENBQVcsRUFBRSxNQUFjLEVBQUUsT0FBZSxFQUFFLElBQVksRUFBRSxDQUFXO1lBQzNGLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztZQUNmLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztZQUVoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNwQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNoRCxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNaLENBQUMsRUFBRSxDQUFDO2dCQUNMLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLENBQUM7b0JBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWixDQUFDLEVBQUUsQ0FBQztnQkFDTCxDQUFDO1lBQ0YsQ0FBQztZQUVELEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUMsQ0FBQztRQUVPLFNBQVMsQ0FBQyxDQUFXLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxDQUFXO1lBQ3ZFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ3BDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDYixDQUFDO1FBQ0YsQ0FBQztLQUNEO0lBdERZLG9CQUFTLFlBc0RyQixDQUFBO0FBQ0YsQ0FBQyxFQXhEUyxVQUFVLEtBQVYsVUFBVSxRQXdEbkIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgQWxnb3JpdGhtcyB7XHJcblx0ZXhwb3J0IGNsYXNzIE1lcmdlU29ydCBleHRlbmRzIFNvcnRCYXNlIHtcclxuXHRcdHByaXZhdGUgYXJyYXlDb3B5OiBudW1iZXJbXTtcclxuXHJcblx0XHRwdWJsaWMgZXhlY3V0ZSh1bnNvcnRlZExpc3Q6IG51bWJlcltdKSB7XHJcblx0XHRcdHN1cGVyLmV4ZWN1dGUodW5zb3J0ZWRMaXN0KTtcclxuXHRcdFx0dGhpcy5hcnJheUNvcHkgPSBzdXBlci5jb3B5KHVuc29ydGVkTGlzdCk7XHJcblx0XHRcdHN1cGVyLmFkZFRvSW50ZXJtZWRpYXRlU29ydHModGhpcy5hcnJheUNvcHkpO1xyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy50b3BEb3duTWVyZ2VTb3J0KHRoaXMuYXJyYXlDb3B5LCBbXSwgdGhpcy5hcnJheUNvcHkubGVuZ3RoKTtcclxuXHJcblx0XHRcdHRoaXMuc3RvcFdhdGNoKCk7XHJcblx0XHRcdHJldHVybiB0aGlzLmFycmF5Q29weTtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHRvcERvd25NZXJnZVNvcnQoYTogbnVtYmVyW10sIGI6IG51bWJlcltdLCBuOiBudW1iZXIpOiB2b2lkIHtcclxuXHRcdFx0dGhpcy5jb3B5QXJyYXkoYSwgMCwgbiwgYik7XHJcblx0XHRcdHRoaXMudG9wRG93blNwbGl0TWVyZ2UoYiwgMCwgbiwgYSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSB0b3BEb3duU3BsaXRNZXJnZShiOiBudW1iZXJbXSwgaUJlZ2luOiBudW1iZXIsIGlFbmQ6IG51bWJlciwgYTogbnVtYmVyW10pOiB2b2lkIHtcclxuXHRcdFx0aWYgKGlFbmQgLSBpQmVnaW4gPCAyKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBpTWlkZGxlID0gTWF0aC5mbG9vciAoKGlFbmQgKyBpQmVnaW4pIC8gMik7XHJcblx0XHRcdHRoaXMudG9wRG93blNwbGl0TWVyZ2UoYSwgaUJlZ2luLCBpTWlkZGxlLCBiKTtcclxuXHRcdFx0dGhpcy50b3BEb3duU3BsaXRNZXJnZShhLCBpTWlkZGxlLCBpRW5kLCBiKTtcclxuXHJcblx0XHRcdHRoaXMudG9wRG93bk1lcmdlKGIsIGlCZWdpbiwgaU1pZGRsZSwgaUVuZCwgYSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSB0b3BEb3duTWVyZ2UoYTogbnVtYmVyW10sIGlCZWdpbjogbnVtYmVyLCBpTWlkZGxlOiBudW1iZXIsIGlFbmQ6IG51bWJlciwgYjogbnVtYmVyW10pOiB2b2lkIHtcclxuXHRcdFx0bGV0IGkgPSBpQmVnaW47XHJcblx0XHRcdGxldCBqID0gaU1pZGRsZTtcclxuXHJcblx0XHRcdGZvciAobGV0IGsgPSBpQmVnaW47IGsgPCBpRW5kOyBrKyspIHtcclxuXHRcdFx0XHRpZiAoaSA8IGlNaWRkbGUgJiYgKGogPj0gaUVuZCB8fCBhW2ldIDw9IGFbal0pKSB7XHJcblx0XHRcdFx0XHRiW2tdID0gYVtpXTtcclxuXHRcdFx0XHRcdGkrKztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRiW2tdID0gYVtqXTtcclxuXHRcdFx0XHRcdGorKztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHN1cGVyLmFkZFRvSW50ZXJtZWRpYXRlU29ydHModGhpcy5hcnJheUNvcHkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgY29weUFycmF5KGE6IG51bWJlcltdLCBpQmVnaW46IG51bWJlciwgaUVuZDogbnVtYmVyLCBiOiBudW1iZXJbXSk6IHZvaWQge1xyXG5cdFx0XHRmb3IgKGxldCBrID0gaUJlZ2luOyBrIDwgaUVuZDsgaysrKSB7XHJcblx0XHRcdFx0YltrXSA9IGFba107XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0iXX0=